*{
    margin:0;
    padding: 0;
    box-sizing: border-box; /*3- Já faço isso por padrão em meu arquivo, mas para que as dimensões fiquem corretas preciso do box-sizing contar as bordas e paddings no width/height.*/
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}
.grid { /*5- Assim como em 4, crio um padding dentro do meu grid que vai funcionar como margin para div .col. E somado o padding de div.col e div.col-content a minha div.col-content fica a 20 px das laterais da página, assim como ao somar as bordas de div.col-content que as separa uma das outras também temos os mesmos 20px
Para visualizar como ficou basta olhar no inspecionar.*/
    padding: 10px;
}
/*Para resolver o problema com o texto Título 1 eu preciso usar o pseudo-elemento ::after para adicionar um conteúdo ao final da .grid.*/
.grid::after {
    content: ''; /*esse conteúdo é vazio*/
    display: block; /*É uma box*/
    clear: both; /*e usa um atibuto clear para limpar e apagar tudo que tem a esquerda e direita dele both, formando o grid um bloco que ocupa toda página.
    clear pode ser left, right e etc.*/
}

.grid .col {
    /*display: inline-block;*/ /*Existe uma propriedade inline-block que mescla inline e block e cria um bloco que aceita o ajuste lateral. Porém é uma propriedade muito pouco usada, porquê vai ela pega elementos do html que deixa um espaço extra entre os blocos mesmo com minha margin sendo resetada no início do css e porquê tem uma função que pode ser feita com outras propriedades mais fáceis e seguras.*/
    width: 33.33%; /*AJUSTE DE GRID FLOAT PASSOS: 0- Se eu tentar ajustar a largura a fim de ter 3 box por linha com uma margin, o widht não se alinha porquê as margens estão fora de width e vão deixar o tamanho total maior que o necessário. Para corrigir esse erro, removo a margem e crio uma div .col-content para ser o conteúdo da box.*/
    height: 200px;
    /*Float era o modo utilizado antes de flex e grid. Hoje já não é tão usado.*/
    float: left; /*Float flutua o conteúdo da TAG para um determinado sentido e diz para o navegador que o espaço necessário para o conteúdo é aquele ficando livre o espaço no sentido contrário para outros conteúdos.*/
    /*Antes do float as margens de um conteúdo se sobrepõe (ficam uma em cima da outra), quando a gente ativa o float, o fim de um conteúdo vira o fim da margem, portanto se você tem duas divs que se separam com margem de 20 em ambas, a margem total que as separa será 40 (20+20).*/
    padding: 10px; /*4- Após criar e dimensionar minha div de conteúdo eu crio um padding na minha div .col que vai funcionar como margin para div .col-content. Quando fizermos isso, teremos as box organizadas, porém a margin externa no meu grid, vai ficar inferior a magin entre as box.*/
}

/*1- Ainda para colocar 3 box por linha, eu assumo que ao ter 3 divs sem margem por linha minha div de conteúdo, vai ocupar 100% da minha div do espaço .col.*/
.grid .col-content {
    width: 100%;
    height: 100%;
    background: #473d8b; /*2- A cor do fundo é aplicado aqui para não ocupar as margens que são criadas com padding.*/
    color:white;
}

/*IMPORTANTE: Essa forma de grid é didática. As formas flex e grid são as usadas atualmente.*/

/*Cores HTML:
rgb: rgb (0,0,0) - preto / (128,128,128) - cinza / (255,255,255) - branco
pode usar o "a" para opacidade - rgba (0,0,0,0-1) 0 - transparente / 1 - cor sólido.

hexadecimal: #000000 + 00 para opacidade (sendo 00/red/00/green/00/blue) pode ser abreviado em #000 caso os dois números referente a cor seja iguais.
#000000 - preto e #FFFFFF - branco. A opacidade é 00 para transparente / sem número - cor sólida

hsl: hsl (0,0,0) - preto / (50%,50%,50%) - cinza / (100%,100%,100%) - branco
pode usar o "a" para opacidade - hsla(0,1%,2%,0-100%) 0-transparente / 100% - cor sólida.

Não se preocupe com o código de cada cor, pois isso já vem do design ou você consegue gerar tanto o código, quanto paletas pela internet.
*/
