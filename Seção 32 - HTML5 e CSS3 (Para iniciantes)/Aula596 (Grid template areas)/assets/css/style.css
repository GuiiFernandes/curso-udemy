html {
    font-size: 62.5%;
    scroll-behavior: smooth;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

body {
    font-size: 1.6rem;
}

.container { /*Centraliza o conteúdo do grid.*/
    max-width: 1200px;
    margin: 0 auto;
}

.grid {
    display: grid; /*cria o display em grid.*/
    grid-template-rows: auto auto auto; /*Cria 3 linhas de altura automatica no grid*/
    grid-template-columns: auto 1fr; /*Cria duas colunas no grid, uma de largura de 200px e outra com 1 fração do espaço restante (ou seja, ele todo).*/
    /*O atributo abaixo nos permite nominar cada area da grid de acordo com grid-area criado em outras partes do css. O nome usado em grid-area é o que linka a coluna criada em grid-template-columns/row com grid-area.*/
    grid-template-areas:
    'header header' /*Cada aspas representa uma linha e deve ser preenchido a quantidade de nome da grid-area para a area que ela vai ocupar. como a header vai ficar em duas colunas usamos dessa forma.*/
    'nav main' /*nav e main vão ficar na mesma linha, porém em coluna diferente.*/
    'rodape rodape' /*Assim como header, rodape também ocupa uma linha e duas colunas.*/
    ;
}

.grid div:nth-child(1) { /*Vou chamar a primeira div do meu grid, que é o header.*/
    background:pink;
    grid-area: header; /*Vou dar o nome ao grid-area=header para que quando o grid-template-areas link o conteúdo certo ao local certo do grid.*/
    display: flex; /*Deixa a logo e lado a lado.*/
    justify-content: space-between; /*Faz com que alinhe Logo e Menu com um espaço igual entre eles.*/
    align-items: center; /*Alinha logo e menu no centro vertical do header.*/
}

.grid div:nth-child(2) { /*Faço o mesmo com a segunda div*/
    background:rgb(105, 209, 174);
    grid-area: nav; /*Dou o nome de nav, vai ser o menu lateral da minha grid.*/
    display: flex;
    flex-direction: column;
    justify-content:start;
    align-items: center;
}

/*As programações abaixo é para configurar os botões do meu menu.*/
.grid ul {
    list-style: none;
    margin: 0 auto;
}

.header ul li {
    float: left;
}

.grid ul li a {
    display: block;
    text-decoration: none;
    color: black;
    transition: all 400ms ease-in-out;
}

.nav ul li a {
    padding: 2px 40px 2px 10px;
}

.header ul li a {
    padding: 10px 20px;
    text-transform: uppercase;
}

.grid ul li a:hover {
    background: rgba(0, 0, 0, 0.2);
    color:white;
}

.grid div:nth-child(3) { /*nomeio com o grid-area o 3º item do meu grid, o main.*/
    background:gray;
    color:white;
    grid-area: main;
    padding: 5px 10px;
}

.grid div:nth-child(4) { /*nomeio com o grid-area o 4º item do meu grid, o main.*/
    background:pink;
    grid-area: rodape;
}

@media (max-width: 768px) { /*Uso um media para reorganizar meu grid caso o usuário mude o tamanho do display de visualização.*/
    .grid{
        display: grid; /*cria o display em grid.*/
        grid-template-rows: auto; /*Cria as linhas de altura automatica no grid*/
        grid-template-columns: auto; /*Cria uma colunaa no grid, de tamanho automatico.*/
        grid-template-areas:
        'header' /*Header na primeira linha*/
        'nav' /*Nav na segunda*/
        'main' /*Main na terceira*/
        'rodape' /*rodape na última*/
        ; /*Uso apenas um grid-area para cada '' porque tenho apenas uma coluna nesta configuração de display.*/
    }

    .grid div:nth-child(2) {
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .nav ul li {
        float: left;
    }

    .nav ul li a {
        padding: 2px 20px 2px 20px;
    }
}